//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.03.16 at 05:00:16 PM CET 
//

package XMLMessages;

import java.io.IOException;
import java.math.BigInteger;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;

import javax.xml.bind.JAXBException;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;

import GenericCommonClasses.AbstractMessage;
import GenericCommonClasses.GenericProtocol;
import GenericCommonClasses.IMessage;
import GenericCommonClasses.IServerProtocol;
import GenericCommonClasses.Parser;
import GenericCommonClasses.Parser.MessageType;

/**
 * <p>
 * Java class for anonymous complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within
 * this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="ProblemType" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element name="SolvingTimeout" type="{http://www.w3.org/2001/XMLSchema}unsignedLong" minOccurs="0"/>
 *         &lt;element name="Data" type="{http://www.w3.org/2001/XMLSchema}base64Binary"/>
 *         &lt;element name="Id" type="{http://www.w3.org/2001/XMLSchema}unsignedLong" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = { "problemType", "solvingTimeout", "data", "id" })
@XmlRootElement(name = "SolveRequest")
public class SolveRequest extends AbstractMessage
{

	@XmlElement(name = "ProblemType", required = true)
	protected String problemType;
	@XmlElement(name = "SolvingTimeout")
	@XmlSchemaType(name = "unsignedLong")
	protected BigInteger solvingTimeout;
	@XmlElement(name = "Data", required = true)
	protected byte[] data;
	@XmlElement(name = "Id")
	@XmlSchemaType(name = "unsignedLong")
	protected BigInteger id;

	/**
	 * Gets the value of the problemType property.
	 * 
	 * @return possible object is {@link String }
	 * 
	 */
	public String getProblemType()
	{
		return problemType;
	}

	/**
	 * Sets the value of the problemType property.
	 * 
	 * @param value
	 *            allowed object is {@link String }
	 * 
	 */
	public void setProblemType(String value)
	{
		this.problemType = value;
	}

	/**
	 * Gets the value of the solvingTimeout property.
	 * 
	 * @return possible object is {@link BigInteger }
	 * 
	 */
	public BigInteger getSolvingTimeout()
	{
		return solvingTimeout;
	}

	/**
	 * Sets the value of the solvingTimeout property.
	 * 
	 * @param value
	 *            allowed object is {@link BigInteger }
	 * 
	 */
	public void setSolvingTimeout(BigInteger value)
	{
		this.solvingTimeout = value;
	}

	/**
	 * Gets the value of the data property.
	 * 
	 * @return possible object is byte[]
	 */
	public byte[] getData()
	{
		return data;
	}

	/**
	 * Sets the value of the data property.
	 * 
	 * @param value
	 *            allowed object is byte[]
	 */
	public void setData(byte[] value)
	{
		this.data = value;
	}

	/**
	 * Gets the value of the id property.
	 * 
	 * @return possible object is {@link BigInteger }
	 * 
	 */
	public BigInteger getId()
	{
		return id;
	}

	/**
	 * Sets the value of the id property.
	 * 
	 * @param value
	 *            allowed object is {@link BigInteger }
	 * 
	 */
	public void setId(BigInteger value)
	{
		this.id = value;
	}

	@Override
	public String getString() throws JAXBException
	{
		return Parser.marshallMessage(this, SolveRequest.class);
	}

	@Override
	public MessageType getMessageType()
	{
		return MessageType.SOLVE_REQUEST;
	}

	@Override
	protected void getMessageResponse(IServerProtocol serverProtocol,
			Socket socket, List<IMessage> delayedResponse) throws IOException
	{
		List<IMessage> messages = new ArrayList<>(2);

		BigInteger id = serverProtocol.registerProblem(getId(), getData(),
				getProblemType(), getSolvingTimeout());

		// Inform CC about problem id
		messages.add(serverProtocol.getNoOperationMessage());
		messages.add(new SolveRequestResponse(id));
		GenericProtocol.sendMessages(socket,
				messages.toArray(new IMessage[messages.size()]));

		// Relay information for BS
		setId(id);
		serverProtocol.addBackupServerMessage(this);

		// Add problem to delayed responses
		delayedResponse.add(new DivideProblem(getProblemType(), id, getData(),
				new BigInteger("0"), new BigInteger("-1")));
	}

	@Override
	public BigInteger getProblemId()
	{
		return getId();
	}
}
